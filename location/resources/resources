#!/usr/local/bin/python

################################################################################
# Author:     Thomas D'haenens
# License:    GPL-3.0
# Link:       https://github.com/BENEATLY/neat-community-plugins/
# Contact:    https://neatly.be/
################################################################################


# IMPORT: Standard Modules
import sqlalchemy.sql.default_comparator                                                    # SQLAlchemy Default Comparator
import sys                                                                                  # System Lib
import ujson                                                                                # JSON Lib


# FUNCTION: Read JSON File (No Logging)
def readJSONFile(file):
    with open(file, encoding='utf-8') as content:
        return ujson.load(content)


# CONFIGURATION: Determine Installation Location
locationConfig = readJSONFile('/etc/neatly/base/location.json')

# CONFIGURATION: Add Current Path to Default Python Paths
sys.path.append(locationConfig['lib'])


# IMPORT: Custom Modules
from tables import *                                                                        # Tables Lib
import actions                                                                              # Actions Lib
import basic                                                                                # Basic Lib
from plugins import createPluginLogger, constructPath                                       # Plugins Lib


# CONFIGURATION: Plugin
pluginConfig = {'plugin': {'id': 3, 'name': 'Location'}, 'logger': 'resources'}

# CONFIGURATION: Create Logger
logger = createPluginLogger(pluginConfig['plugin'], pluginConfig['logger'], makePreferred=True)

# CONFIGURATION: Executor
execParams = {'internal': True, 'source': 'Resources (Plugin: ' + pluginConfig['plugin']['name'] + ')'}


# CREATE: DB Connection
session = createDBSession()


# INSERT: Countries
countries = readJSONFile(constructPath(pluginConfig, ['resources']) + 'countries.json')
[actions.createByDict(execParams, session, Country, **country) for country in countries]

# GET: Current Plugin
currentPlugin = session.query(Plugin).filter_by(id=pluginConfig['plugin']['id']).first()

# GET: Root Team
rootTeam = session.query(Team).filter_by(id=1).first()

# GET: API Actions
apiActionList = session.query(ApiAction).all()
apiActionDict = {apiAction.name: apiAction for apiAction in apiActionList}

# INSERT: ApiObjects
apiObjects = [
    {'name': 'Address'},
    {'name': 'Coordinate'},
    {'name': 'Country'}
]
[actions.createByDict(execParams, session, ApiObject, **apiObject) for apiObject in apiObjects]

# GET: New API Objects
newApiObjectList = [session.query(ApiObject).filter_by(**apiObject).first() for apiObject in apiObjects]
newApiObjectDict = {apiObject.name: apiObject for apiObject in newApiObjectList}

# DEFINE: Right
rights = []

# DEFINE: Admin Rights
skipRights = []
rights.extend(basic.flattenArray([[{'apiObject': apiObject, 'apiAction': apiAction, 'team': [rootTeam], 'isolated': False, 'own': False, 'all': True} for apiAction in apiActionList if ({'apiObject': apiObject.name, 'apiAction': apiAction.name} not in skipRights)] for apiObject in newApiObjectList]))

# INSERT: Rights
[actions.createByDict(execParams, session, Right, **right) for right in rights]
